{"ast":null,"code":"import { ActivatedRoute, Router } from '@angular/router';\nimport { DataService } from '../data.service';\nimport { OrderService } from '../order.service';\nimport { ProductService } from '../product.service';\nimport { Order } from './order';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../order.service\";\nimport * as i2 from \"../product.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../data.service\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"../header/header.component\";\nimport * as i7 from \"@angular/common\";\nexport let NeworderComponent = /*#__PURE__*/(() => {\n  class NeworderComponent {\n    constructor(orderservice, productService, router, route, dataService) {\n      this.orderservice = orderservice;\n      this.productService = productService;\n      this.router = router;\n      this.route = route;\n      this.dataService = dataService;\n      this.orderObj = new Order();\n      this.productPrice = 0;\n      this.totalOrderPrice = 0;\n      this.isReady = false;\n      this.qty = 1;\n      this.route.params.subscribe(params => {\n        this.proId = +params['proId']; // Convert route parameter to a number\n        console.log('product id ', this.proId);\n        // this.checkIsReady();\n        this.getProductPrice();\n      });\n      this.dataService.data$.subscribe(newData => {\n        if (newData !== undefined && newData !== null) {\n          this.username = newData;\n          console.log('Username:', this.username);\n          // this.checkIsReady();\n        } else {\n          // Handle the case where username is not available\n          console.log('Username is not available');\n          // You can set isReady to false or handle it in a way that fits your requirements\n        }\n      });\n\n      this.orderObj.qty = 1;\n      this.calculateTotalPrice();\n    }\n    ngOnInit() {\n      this.calculateTotalPrice();\n    }\n    // checkIsReady() {\n    //   if (this.proId !== undefined && this.username !== undefined) {\n    //     this.isReady = true;\n    //   }\n    // }\n    getProductPrice() {\n      // if (this.isReady) {\n      const productId = this.proId;\n      this.productService.getProductPrice(productId).subscribe(price => {\n        console.log('Product Price:', price);\n        this.productPrice = price;\n        this.calculateTotalPrice();\n      }, error => {\n        console.log('Error fetching product price:', error);\n      });\n      // }\n    }\n\n    calculateTotalPrice() {\n      // if (this.isReady) {\n      const quantity = this.orderObj.qty;\n      // Handle the case where quantity is zero\n      if (quantity === 0) {\n        this.totalOrderPrice = 0;\n      } else if (this.productPrice === 1) {\n        this.totalOrderPrice = this.productPrice;\n      } else if (this.productPrice && quantity) {\n        this.totalOrderPrice = this.productPrice * quantity;\n      } else {\n        // Handle other cases (e.g., productPrice is not available)\n        this.totalOrderPrice = this.productPrice;\n      }\n      console.log('Total Price:', this.totalOrderPrice);\n      // }\n    }\n\n    placeOrder() {\n      // if (this.isReady) {\n      // Calculate total price before placing the order\n      this.calculateTotalPrice();\n      // Include total price in the order object\n      this.orderObj.orderprice = this.totalOrderPrice;\n      this.orderObj.customerusername = this.username;\n      this.orderObj.productid = this.proId;\n      this.orderObj.status = 'Ordered';\n      // Call your order service with the order object\n      this.orderservice.addOrder(this.orderObj).subscribe(data => console.log(data), error => console.log(error));\n      alert('Order Placed');\n      this.router.navigate(['/orders']);\n      // }\n    }\n\n    decreaseQty() {\n      if (this.orderObj.qty > 1) {\n        this.orderObj.qty--;\n        this.getProductPrice();\n      }\n    }\n    increaseQty() {\n      this.orderObj.qty++;\n      this.getProductPrice();\n    }\n    static #_ = this.ɵfac = function NeworderComponent_Factory(t) {\n      return new (t || NeworderComponent)(i0.ɵɵdirectiveInject(i1.OrderService), i0.ɵɵdirectiveInject(i2.ProductService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.DataService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: NeworderComponent,\n      selectors: [[\"neworder\"]],\n      decls: 20,\n      vars: 7,\n      consts: [[1, \"container\"], [1, \"column\"], [3, \"click\"], [\"type\", \"number\", \"min\", \"1\", 3, \"ngModel\", \"ngModelChange\"], [2, \"display\", \"flex\", \"justify-content\", \"center\"], [1, \"btn\", 3, \"click\"]],\n      template: function NeworderComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"header\");\n          i0.ɵɵelementStart(1, \"div\")(2, \"div\", 0)(3, \"div\", 1)(4, \"h6\");\n          i0.ɵɵtext(5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"p\");\n          i0.ɵɵtext(7);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"div\")(9, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function NeworderComponent_Template_button_click_9_listener() {\n            return ctx.decreaseQty();\n          });\n          i0.ɵɵtext(10, \"-\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"input\", 3);\n          i0.ɵɵlistener(\"ngModelChange\", function NeworderComponent_Template_input_ngModelChange_11_listener($event) {\n            return ctx.orderObj.qty = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function NeworderComponent_Template_button_click_12_listener() {\n            return ctx.increaseQty();\n          });\n          i0.ɵɵtext(13, \"+\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(14, \"div\")(15, \"h1\", 4);\n          i0.ɵɵtext(16);\n          i0.ɵɵpipe(17, \"currency\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function NeworderComponent_Template_button_click_18_listener() {\n            return ctx.placeOrder();\n          });\n          i0.ɵɵtext(19, \"Place Order\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.username);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.proId);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.orderObj.qty);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(17, 4, ctx.totalOrderPrice, \"INR\"));\n        }\n      },\n      dependencies: [i5.DefaultValueAccessor, i5.NumberValueAccessor, i5.NgControlStatus, i5.MinValidator, i5.NgModel, i6.HeaderComponent, i7.CurrencyPipe],\n      styles: [\".btn[_ngcontent-%COMP%]{display:flex;margin:50px auto;width:-moz-fit-content;width:fit-content;padding:14px 50px;border-radius:6px;text-decoration:none;color:#fff;background-color:#ff004f;border:none}\"]\n    });\n  }\n  return NeworderComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}