{"ast":null,"code":"import { ActivatedRoute, Router } from '@angular/router';\nimport { DataService } from '../data.service';\nimport { OrderService } from '../order.service';\nimport { ProductService } from '../product.service';\nimport { Order } from './order';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../order.service\";\nimport * as i2 from \"../product.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../data.service\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"../header/header.component\";\nexport let NeworderComponent = /*#__PURE__*/(() => {\n  class NeworderComponent {\n    constructor(orderservice, productService, router, route, dataService) {\n      this.orderservice = orderservice;\n      this.productService = productService;\n      this.router = router;\n      this.route = route;\n      this.dataService = dataService;\n      this.orderObj = new Order();\n      this.productPrice = 0;\n      this.totalOrderPrice = 0;\n      this.isReady = false;\n      this.route.params.subscribe(params => {\n        this.proId = +params['proId']; // Convert route parameter to a number\n        console.log('product id ', this.proId);\n        this.checkIsReady();\n      });\n      this.dataService.data$.subscribe(newData => {\n        if (newData !== undefined && newData !== null) {\n          this.username = newData;\n          console.log('Username:', this.username);\n          this.checkIsReady();\n        } else {\n          // Handle the case where username is not available\n          console.log('Username is not available');\n          // You can set isReady to false or handle it in a way that fits your requirements\n        }\n      });\n    }\n\n    checkIsReady() {\n      if (this.proId !== undefined && this.username !== undefined) {\n        this.isReady = true;\n      }\n    }\n    getProductPrice() {\n      if (this.isReady) {\n        const productId = this.proId;\n        this.productService.getProductPrice(productId).subscribe(price => {\n          console.log('Product Price:', price);\n          this.productPrice = price;\n          this.calculateTotalPrice();\n        }, error => {\n          console.log('Error fetching product price:', error);\n        });\n      }\n    }\n    calculateTotalPrice() {\n      if (this.isReady) {\n        const quantity = this.orderObj.qty;\n        if (this.productPrice && quantity) {\n          this.totalOrderPrice = this.productPrice * quantity;\n          console.log('Total Price:', this.totalOrderPrice);\n        }\n      }\n    }\n    placeOrder() {\n      if (this.isReady) {\n        // Calculate total price before placing the order\n        this.calculateTotalPrice();\n        // Include total price in the order object\n        this.orderObj.orderprice = this.totalOrderPrice;\n        this.orderObj.customerusername = this.username;\n        this.orderObj.productid = this.proId;\n        // Call your order service with the order object\n        this.orderservice.addOrder(this.orderObj).subscribe(data => console.log(data), error => console.log(error));\n        alert('Order Placed');\n        this.router.navigate(['/orders']);\n      }\n    }\n    static #_ = this.ɵfac = function NeworderComponent_Factory(t) {\n      return new (t || NeworderComponent)(i0.ɵɵdirectiveInject(i1.OrderService), i0.ɵɵdirectiveInject(i2.ProductService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.DataService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: NeworderComponent,\n      selectors: [[\"neworder\"]],\n      decls: 32,\n      vars: 4,\n      consts: [[\"border\", \"1\", \"align\", \"center\"], [\"type\", \"number\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [3, \"click\"]],\n      template: function NeworderComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"header\");\n          i0.ɵɵelementStart(1, \"div\")(2, \"table\", 0)(3, \"tr\")(4, \"td\");\n          i0.ɵɵtext(5, \"Order Id\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"td\");\n          i0.ɵɵtext(7);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"tr\")(9, \"td\");\n          i0.ɵɵtext(10, \"User Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"td\");\n          i0.ɵɵtext(12);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"tr\")(14, \"td\");\n          i0.ɵɵtext(15, \"Product Id\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(16, \"td\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"tr\")(18, \"td\");\n          i0.ɵɵtext(19, \"Quantity\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"td\")(21, \"input\", 1);\n          i0.ɵɵlistener(\"ngModelChange\", function NeworderComponent_Template_input_ngModelChange_21_listener($event) {\n            return ctx.orderObj.qty = $event;\n          })(\"change\", function NeworderComponent_Template_input_change_21_listener() {\n            return ctx.getProductPrice();\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(22, \"tr\")(23, \"td\");\n          i0.ɵɵtext(24, \"Price\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(25, \"td\");\n          i0.ɵɵtext(26);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(27, \"tr\")(28, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function NeworderComponent_Template_button_click_28_listener() {\n            return ctx.calculateTotalPrice();\n          });\n          i0.ɵɵtext(29, \"Calculate Total Price\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(30, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function NeworderComponent_Template_button_click_30_listener() {\n            return ctx.placeOrder();\n          });\n          i0.ɵɵtext(31, \"Place Order\");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵtextInterpolate(ctx.orderObj.orderid);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.username);\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"ngModel\", ctx.orderObj.qty);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.totalOrderPrice);\n        }\n      },\n      dependencies: [i5.DefaultValueAccessor, i5.NumberValueAccessor, i5.NgControlStatus, i5.NgModel, i6.HeaderComponent],\n      styles: [\"table[_ngcontent-%COMP%]{border-collapse:collapse;border:none}\"]\n    });\n  }\n  return NeworderComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}