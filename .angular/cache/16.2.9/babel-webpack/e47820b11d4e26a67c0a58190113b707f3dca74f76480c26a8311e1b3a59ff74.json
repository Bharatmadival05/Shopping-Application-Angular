{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DataService } from '../data.service';\nimport { OrderService } from '../order.service';\nimport { ProductService } from '../product.service';\nimport { Order } from './order';\nexport let NeworderComponent = class NeworderComponent {\n  constructor(orderservice, productService, router, route, dataService) {\n    this.orderservice = orderservice;\n    this.productService = productService;\n    this.router = router;\n    this.route = route;\n    this.dataService = dataService;\n    this.orderObj = new Order();\n    this.productPrice = 0;\n    this.totalOrderPrice = 0;\n    this.isReady = false;\n    this.route.params.subscribe(params => {\n      this.proId = +params['proId']; // Convert route parameter to a number\n      console.log('product id ', this.proId);\n      this.checkIsReady();\n    });\n    this.dataService.data$.subscribe(newData => {\n      if (newData !== undefined && newData !== null) {\n        this.username = newData;\n        console.log('Username:', this.username);\n        this.checkIsReady();\n      } else {\n        // Handle the case where username is not available\n        console.log('Username is not available');\n        // You can set isReady to false or handle it in a way that fits your requirements\n      }\n    });\n  }\n\n  checkIsReady() {\n    if (this.proId !== undefined && this.username !== undefined) {\n      this.isReady = true;\n    }\n  }\n  getProductPrice() {\n    if (this.isReady) {\n      const productId = this.proId;\n      this.productService.getProductPrice(productId).subscribe(price => {\n        console.log('Product Price:', price);\n        this.productPrice = price;\n        this.calculateTotalPrice();\n      }, error => {\n        console.log('Error fetching product price:', error);\n      });\n    }\n  }\n  calculateTotalPrice() {\n    if (this.isReady) {\n      const quantity = this.orderObj.qty;\n      // Handle the case where quantity is zero\n      if (quantity === 0) {\n        this.totalOrderPrice = 0;\n      } else if (this.productPrice && quantity) {\n        this.totalOrderPrice = this.productPrice * quantity;\n      } else {\n        // Handle other cases (e.g., productPrice is not available)\n        this.totalOrderPrice = 0;\n      }\n      console.log('Total Price:', this.totalOrderPrice);\n    }\n  }\n  placeOrder() {\n    if (this.isReady) {\n      // Calculate total price before placing the order\n      this.calculateTotalPrice();\n      // Include total price in the order object\n      this.orderObj.orderprice = this.totalOrderPrice;\n      this.orderObj.customerusername = this.username;\n      this.orderObj.productid = this.proId;\n      // Call your order service with the order object\n      this.orderservice.addOrder(this.orderObj).subscribe(data => console.log(data), error => console.log(error));\n      alert('Order Placed');\n      this.router.navigate(['/orders']);\n    }\n  }\n  decreaseQty() {\n    if (this.orderObj.qty > 0) {\n      this.orderObj.qty--;\n      this.getProductPrice();\n    }\n  }\n  increaseQty() {\n    this.orderObj.qty++;\n    this.getProductPrice();\n  }\n};\nNeworderComponent = __decorate([Component({\n  selector: 'neworder',\n  templateUrl: './neworder.component.html',\n  styleUrls: ['./neworder.component.css']\n}), __metadata(\"design:paramtypes\", [OrderService, ProductService, Router, ActivatedRoute, DataService])], NeworderComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}